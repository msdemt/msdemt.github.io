[{"content":"问题 使用hugo-theme-stack主题时，将项目部署到github pages上后，发现categories图片无法显示\n解决 在静态网页项目根目录下新建名为 .nojekyll 的文件。\n或者在hugo项目中static目录下新建名为 .nojekyll 的文件。\n原因 Github Pages 默认是基于 Jekyll 构建，Jekyll 是一个将纯文本转换为静态网站的工具，它构建的网站下各种目录都是特定的以下划线开头命名的文件夹，例如 _layouts、_posts ，它会忽略掉其它的以下划线开头的文件夹和文件。\n.nojekyll 就是告诉 Github Pages 当前网站不是基于 Jekyll 构建的，不要忽略掉下划线开头的文件和文件夹。\n可见 .nojekyll 主要就是用于 Github Pages 这种有默认规则的网站部署平台，如果是部署在自己的服务器上，可以把它删掉。\n反之，如果你的网站不是 Jekyll 构建的，要部署到 Github Pages ，并且包含下划线开头的文件或文件夹，那么你就需要在根目录添加一个 .nojekyll 空文件。\n参考：\nhttps://github.com/CaiJimmy/hugo-theme-stack/issues/726\nhttps://www.cnblogs.com/babywhale/p/13560573.html\n","date":"2023-07-07T00:00:00Z","permalink":"https://msdemt.github.io/p/github-pages-image/","title":"github pages无法显示图片"},{"content":"git的4个区 工作区（Working Area） 相当于工作空间的目录，即代码的存放位置\n暂存区（Stage） 也称为 index ，用来跟踪已暂存文件，一般存在 .git 下的 index 文件，所以有时也称暂存区为索引。\n本地仓库（Local Repository）\n远程仓库（Remote Repository）\ngit文件的5种状态 未修改（Origin） 已修改（Modified） 已暂存（Staged） 已提交（Committed） 已推送（Pushed） 工作区中文件的初始状态是 未修改，当我们修改文件后，其状态变为 已修改，git diff 命令可以查看已修改但未暂存的文件。（git diff后输入 q 可以退出） 通过 git add 命令可以把已修改的文件添加到暂存区，git diff --cached 可以查看已暂存但未提交的文件。 通过 git commit 将代码提交到本地仓库，git diff [本地分支] [远程分支] 可以查看已提交本地，但未推送到远程分支的文件。 通过 git push 命令将本地分支推送到远程分支。 回退相关命令 git reset 命令 git reset 是进行回退的具体命令，参数介绍如下\n--soft: 仅仅将头指针恢复，已经 add 的暂存区及工作空间的文件修改不变。 --mixed: 将头指针恢复，已经 add 的暂存区也会恢复 ，工作空间的代码修改不变。 --hard: 头指针、暂存区和工作空间的修改都会恢复。 git log 命令 git log 命令查看git的提交记录，但无法查看已经删除的记录。\ngit reflog 命令 git reflog 命令可以查看所有分支的所有操作记录（包括commit和已被删除的commit记录）\n回退操作 回退操作命令\n将已修改或暂存但未提交的文件回退: git reset --hard 将已提交未推送的版本回退: git reset --hard origin/master 将已提交且推送的版本回退： 回退到某个版本：git reset --hard \u0026lt;版本号\u0026gt; 将回退的版本强制推送到远程仓库：git push -f --hard 可以替换为其他恢复等级，一般使用 --soft，这样修改的内容不会丢失\n版本号可以使用 git log 或 git reflog 查看，如 git reset --hard 811aesfi8\ngit reset --hard \u0026lt;版本号\u0026gt; 也可以替换为 git reset --hard HEAD\n回退到当前版本：git reset --hard HEAD 回退到上一个版本：git reset --hard HEAD^ 回退到上两个版本：git reset --hard HEAD^^ 回退到上三个版本：git reset --hard HEAD^^^ 回退到上十个版本：git reset --hard HEAD~10 git 远程覆盖本地 可以执行如下命令将远程仓库的代码直接覆盖本地仓库\ngit fetch \u0026ndash;all git reset \u0026ndash;hard origin/main git pull git fetch 是下载远程仓库的内容，不做任务的合并\ngit reset 把 HEAD 指向刚刚下载的最新版本\n参考：\nhttps://blog.csdn.net/qing040513/article/details/109150075 https://blog.csdn.net/gercke/article/details/119085963\n","date":"2023-07-07T00:00:00Z","image":"https://msdemt.github.io/p/git-rollback/1_Wjxx83j-qyiNvFBy1yOA1w_hufb4407888dbfcda01762496277a1213f_11862_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://msdemt.github.io/p/git-rollback/","title":"git回退版本"},{"content":"添加代理 1 2 3 4 5 6 7 //http || https git config --global http.proxy http://127.0.0.1:7890 git config --global https.proxy https://127.0.0.1:7890 //sock5代理 git config --global http.proxy socks5://127.0.0.1:7891 git config --global http.proxy socks5://127.0.0.1:7891 只针对github配置代理\n1 2 3 4 5 6 7 8 #使用socks5代理（推荐） git config --global http.https://github.com.proxy socks5://127.0.0.1:7890 #使用http代理（不推荐） git config --global http.https://github.com.proxy http://127.0.0.1:7890 #取消socks5代理 git config --global --unset http.https://github.com.proxy #取消http代理 git config --global --unset http.https://github.com.proxy 查看代理 1 2 git config --global --get http.proxy git config --global --get https.proxy 取消代理 1 2 git config --global --unset http.proxy git config --global --unset https.proxy clash for windows 代理 clash for windows 的 http 和 socks5 代理使用的是同一个端口。\n参考：\nhttps://blog.csdn.net/weimeibuqieryu/article/details/106793645 https://github.com/Fndroid/clash_for_windows_pkg/issues/1244\n","date":"2023-07-07T00:00:00Z","image":"https://msdemt.github.io/p/git-proxy/1_Wjxx83j-qyiNvFBy1yOA1w_hufb4407888dbfcda01762496277a1213f_11862_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://msdemt.github.io/p/git-proxy/","title":"git设置代理"},{"content":"添加子模块 1 git submodule add \u0026lt;url\u0026gt; \u0026lt;path\u0026gt; url为子模块git路径 path为子模块存储的目录路径\n如，将 hugo-theme-stack 项目作为子模块添加到本地项目的 themes 目录\n1 git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes 子模块添加成功后，执行 git status 命令可以看到 .gitmodules 文件已被修改，并新增了一个子模块\n执行 git diff --cached 命令可以查看修改内容\n执行 git commit 命令可以将子模块添加到本地仓库\n使用子模块 直接克隆包含子模块的项目时，子模块目录下没有任何文件，需要在项目的根目录下执行如下命令，完成子模块的下载\n1 2 git submodule init git submodule update 或者\n1 git submodule update --init 克隆项目的同时下载子模块\n1 git clone \u0026lt;url\u0026gt; --recursive 更新子模块 子模块的维护者更新子模块后，使用子模块的项目必须手动更新子模块才可以使用最新的子模块。\n在项目中，进入子模块目录下，执行 git pull 更新，执行 git log 可以查看子模块的更新内容。\n之后进入项目根目录，使用 git add 和 git commit 命令将子模块更新到项目中，然后使用 git push 命令将更新子模块的项目推送到远程仓库。\n如果自己要修改子模块内容，需要先在子模块根路径下执行 git checkout \u0026lt;分支名\u0026gt; ，然后才可以对该子模块进行修改和提交，否则git push提交时出现Everything up-to-date。\n将子模块修改提交后，如果希望将项目依赖的子模块更新到最新版本，需要在项目根路径下执行 git submodule update --remote，然后将项目提交到远程仓库。\n删除子模块 使用 git submodule deinit \u0026lt;子模块名称\u0026gt; 和 git rm \u0026lt;子模块名称\u0026gt; 命令卸载一个子模块。\n如果添加 \u0026ndash;force 参数，则子模块工作区内即使有本地的修改，也会被移除。\n例如，删除名为 test-submodule 子模块\n1 2 git submodule deinit test-submodule git rm test-submodule 如果完全删除子模块，还需要删除项目根路径下的 .gitmodules 文件和 .git/modules 目录下的子模块文件\n参考：\nhttps://blog.csdn.net/guotianqing/article/details/82391665 https://blog.csdn.net/Lee_queenie/article/details/127386151\n","date":"2023-07-07T00:00:00Z","image":"https://msdemt.github.io/p/git-submodule/1_Wjxx83j-qyiNvFBy1yOA1w_hufb4407888dbfcda01762496277a1213f_11862_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://msdemt.github.io/p/git-submodule/","title":"git子模块操作"},{"content":"添加字体 ubuntu上使用vscode编写代码时，字体不好看。\n在windows上，vscode的默认字体为 Consolas，将该字体安装到ubuntu中，让vscode使用该字体。\n进入windows中的C:\\Windows\\Fonts，将Consolas中的ttf字体文件拷贝到ubuntu系统中。\n在ubuntu系统中，新建consolas文件夹存放字体\n1 sudo mkdir /usr/share/fonts/opentype/consolas 将consolas字体文件移动到该文件夹中\n然后执行如下命令，刷新字体缓存\n1 2 sudo dpkg-reconfigure fontconfig sudo fc-cache -vf 配置vscode 设置-文本编辑器-字体-Font Family\n将Consolas字体添加到行首，如下\n1 \u0026#39;Consolas\u0026#39;,\u0026#39;Droid Sans Mono\u0026#39;, \u0026#39;monospace\u0026#39;, monospace 或直接在settings.json中添加\n1 \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;\u0026#39;Consolas\u0026#39;,\u0026#39;Droid Sans Mono\u0026#39;, \u0026#39;monospace\u0026#39;, monospace\u0026#34;, 重启vscode\nConsolas字体\n对应settings.json中会设置如下\n1 2 \u0026#34;editor.fontSize\u0026#34;: 18, \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;\u0026#39;Consolas\u0026#39;,\u0026#39;Droid Sans Mono\u0026#39;, \u0026#39;monospace\u0026#39;, monospace\u0026#34;, vscode调整桌面字体大小\n1 \u0026#34;window.zoomLevel\u0026#34;: 1, ","date":"2023-07-07T00:00:00Z","image":"https://msdemt.github.io/p/ubuntu-vscode-font/ubuntu_logo_hu373a6c33440a9fb65cfc39e6a6372242_135517_120x120_fill_box_smart1_3.png","permalink":"https://msdemt.github.io/p/ubuntu-vscode-font/","title":"ubuntu配置vscode字体"},{"content":"题 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n你可以按任意顺序返回答案。\n示例 1：\n输入：nums = [2,7,11,15], target = 9 输出：[0,1] 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n解 暴力枚举法 1 2 3 4 5 6 7 8 9 10 11 public static int[] twoSum(int[] nums, int target) { int n = nums.length; for(int i=0; i\u0026lt;n; ++i){ for(int j=i+1; j\u0026lt;n; ++j){ if(nums[i] + nums[j] == target){ return new int[]{i, j}; } } } return new int[0]; } 复杂度分析\n时间复杂度：O(N^2)，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。 空间复杂度：O(1) 哈希表 1 2 3 4 5 6 7 8 9 10 public static int[] twoSum1(int[] nums, int target) { Map\u0026lt;Integer, Integer\u0026gt; hashtable = new HashMap\u0026lt;Integer, Integer\u0026gt;(); for(int i=0; i\u0026lt;nums.length; ++i){ if(hashtable.containsKey(target - nums[i])){ return new int[]{hashtable.get(target - nums[i]), i}; } hashtable.put(nums[i], i); } return new int[0]; } 复杂度分析：\n时间复杂度：O(N), 其中 N 是数组中的元素数量。对于每一个元素 x，我们可以 O(1) 地寻找 target - x。 空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销。 作者：LeetCode-Solution 链接：https://leetcode.cn/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/ 来源：力扣（LeetCode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","date":"2023-07-07T00:00:00Z","image":"https://msdemt.github.io/p/two_sum/1603980178-c305fb1df5f5fb7_hu61eb5bf94bba91376f0df83c72584e6c_90324_120x120_fill_box_smart1_3.png","permalink":"https://msdemt.github.io/p/two_sum/","title":"两数之和"},{"content":"ubuntu 安装后，默认没有root用户密码，所以，无法使用su命令切换到root用户\n配置ubuntu root用户密码\n1 sudo passwd 配置后，就可以使用su命令切换到root用户了\n","date":"2022-11-23T00:00:00Z","image":"https://msdemt.github.io/p/ubuntu-root-pwd/ubuntu_logo_hu373a6c33440a9fb65cfc39e6a6372242_135517_120x120_fill_box_smart1_3.png","permalink":"https://msdemt.github.io/p/ubuntu-root-pwd/","title":"ubuntu配置root密码"}]